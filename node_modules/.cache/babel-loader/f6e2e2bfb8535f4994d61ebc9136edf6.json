{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\miasknda2101\\\\Documents\\\\React-Flask-Hashicorp-App\\\\my-app\\\\src\\\\CreateAPolicy.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreateAPolicy(props) {\n  _s();\n\n  const [nameOfPolicy, setName] = React.useState(\"\");\n  const [secretPath, setSecretPath] = React.useState(\"\");\n  const [nameError, setNameError] = React.useState(\"\");\n  const [secretPathError, setSecretError] = React.useState(\"\");\n  const [checkedError, setCheckedError] = React.useState(\"\");\n  const [checkedCategories, setChecked] = React.useState([]);\n\n  const handleToggle = value => {\n    const currentIndex = checkedCategories.indexOf(value);\n    const newChecked = [...checkedCategories];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    if (nameOfPolicy === \"\") {\n      setNameError(\"There's an issue with the name\");\n      return;\n    } else {\n      setNameError(\"\");\n    }\n\n    if (secretPath === \"\") {\n      setSecretError(\"There's an issue with the policy\");\n      return;\n    } else {\n      setSecretError(\"\");\n    }\n\n    if (checkedCategories.length === 0) {\n      setCheckedError(\"You must select at least one permission\");\n      return;\n    } else {\n      setCheckedError(\"\");\n    }\n\n    const mapToCapabilities = {\n      0: '\\\\\"create\\\\\"',\n      1: '\\\\\"read\\\\\"',\n      2: '\\\\\"update\\\\\"',\n      3: '\\\\\"delete\\\\\"'\n    };\n    alert(checkedCategories);\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({\n        policy: '#\\\\npath \\\\\"' + secretPath + '\\\\\" {\\\\n  capabilities = [' + mapToCapabilities[checkedCategories[0]] + checkedCategories.map((e, i) => i > 0 ? mapToCapabilities[e] : \"\") + ']\\\\n}'\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    };\n    await fetch('/policies?VAULT_TOKEN=' + props.token + '&policyLabel=' + nameOfPolicy, requestOptions);\n    props.refreshData();\n    setName(\"\");\n    setSecretPath(\"\");\n    setChecked([]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: \"95vw\",\n      height: \"80vh\",\n      alignItems: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 50,\n        color: \"black\",\n        textAlign: \"left\",\n        fontWeight: 500\n      },\n      children: \"Create/Update a Policy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n}\n\n_s(CreateAPolicy, \"SXZGQDDlpfopb+lgX2d6l7ZLoQA=\");\n\n_c = CreateAPolicy;\nexport default CreateAPolicy;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAPolicy\");","map":{"version":3,"sources":["C:/Users/miasknda2101/Documents/React-Flask-Hashicorp-App/my-app/src/CreateAPolicy.js"],"names":["React","Form","Button","Checkbox","CreateAPolicy","props","nameOfPolicy","setName","useState","secretPath","setSecretPath","nameError","setNameError","secretPathError","setSecretError","checkedError","setCheckedError","checkedCategories","setChecked","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","handleSubmit","event","preventDefault","length","mapToCapabilities","alert","requestOptions","method","body","JSON","stringify","policy","map","e","i","headers","fetch","token","refreshData","display","flexDirection","width","height","alignItems","fontSize","color","textAlign","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nfunction CreateAPolicy(props) {\r\n  const [nameOfPolicy,setName] = React.useState(\"\")\r\n  const [secretPath,setSecretPath] = React.useState(\"\")\r\n  const [nameError,setNameError] = React.useState(\"\")\r\n  const [secretPathError,setSecretError] = React.useState(\"\")\r\n  const [checkedError,setCheckedError] = React.useState(\"\")\r\n  const [checkedCategories,setChecked] = React.useState([])\r\n\r\n  const handleToggle = (value) => {\r\n    const currentIndex = checkedCategories.indexOf(value);\r\n    const newChecked = [...checkedCategories];\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n    setChecked(newChecked);\r\n  };\r\n\r\n    async function handleSubmit(event){\r\n        event.preventDefault()\r\n        if(nameOfPolicy === \"\"){setNameError(\"There's an issue with the name\");return;}else{setNameError(\"\")}\r\n        if(secretPath === \"\"){setSecretError(\"There's an issue with the policy\");return;}else{setSecretError(\"\")}\r\n        if(checkedCategories.length === 0){setCheckedError(\"You must select at least one permission\");return;}else{setCheckedError(\"\")}\r\n        const mapToCapabilities = {0:'\\\\\"create\\\\\"',1:'\\\\\"read\\\\\"',2:'\\\\\"update\\\\\"',3:'\\\\\"delete\\\\\"'}\r\n        alert(checkedCategories)\r\n        const requestOptions = {\r\n            method:'POST',\r\n            body:JSON.stringify({\r\n                                policy:'#\\\\npath \\\\\"'+secretPath+'\\\\\" {\\\\n  capabilities = ['+ (mapToCapabilities[checkedCategories[0]]) + checkedCategories.map((e,i) => i > 0 ? (mapToCapabilities[e]) : \"\")+']\\\\n}'}),\t\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8'\r\n            }\r\n        }\r\n        await fetch('/policies?VAULT_TOKEN='+props.token+'&policyLabel='+nameOfPolicy, requestOptions)\r\n        props.refreshData();\r\n        setName(\"\")\r\n        setSecretPath(\"\")\r\n        setChecked([])\r\n    }\r\n\r\n  return (\r\n      <div style={{display:\"flex\",flexDirection:\"column\",width:\"95vw\",height:\"80vh\",alignItems:\"center\"}} >\r\n        <p style={{fontSize:50,color:\"black\",textAlign:\"left\",fontWeight:500}}>Create/Update a Policy</p>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default CreateAPolicy;\r\n "]},"metadata":{},"sourceType":"module"}