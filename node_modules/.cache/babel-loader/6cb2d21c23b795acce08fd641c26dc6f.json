{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\miasknda2101\\\\Documents\\\\React-Flask-Hashicorp-App\\\\my-app\\\\src\\\\UpdateAPolicy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Autocomplete } from '@material-ui/lab';\nimport { TextField } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UpdateAPolicy(props) {\n  _s();\n\n  const [nameOfPolicy, setName] = React.useState(\"\");\n  const [secretPath, setSecretPath] = React.useState(\"\");\n  const [nameError, setNameError] = React.useState(\"\");\n  const [secretPathError, setSecretError] = React.useState(\"\");\n  const [checkedError, setCheckedError] = React.useState(\"\");\n  const [checkedCategories, setChecked] = React.useState([]);\n  const [policytoPolicyI, setPolicyToPolicyI] = React.useState({});\n  useEffect(() => {\n    setPolicyToPolicyI(props.policytoPolicyInfo);\n    console.log(props.policytoPolicyInfo);\n  }, [props.policytoPolicyInfo]);\n\n  const handleToggle = value => {\n    const currentIndex = checkedCategories.indexOf(value);\n    const newChecked = [...checkedCategories];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    if (nameOfPolicy === \"\") {\n      setNameError(\"There's an issue with the name\");\n      return;\n    } else {\n      setNameError(\"\");\n    }\n\n    if (secretPath === \"\") {\n      setSecretError(\"There's an issue with the policy\");\n      return;\n    } else {\n      setSecretError(\"\");\n    }\n\n    if (checkedCategories.length === 0) {\n      setCheckedError(\"You must select at least one permission\");\n      return;\n    } else {\n      setCheckedError(\"\");\n    }\n\n    const mapToCapabilities = {\n      0: '\\\\\"create\\\\\"',\n      1: '\\\\\"read\\\\\"',\n      2: '\\\\\"update\\\\\"',\n      3: '\\\\\"delete\\\\\"'\n    };\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify({\n        policy: '#\\\\npath \\\\\"' + secretPath + '\\\\\" {\\\\n  capabilities = [' + mapToCapabilities[checkedCategories[0]] + checkedCategories.map((e, i) => i > 0 ? mapToCapabilities[e] : \"\") + ']\\\\n}'\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    };\n    await fetch('/policies?VAULT_TOKEN=' + props.token + '&policyLabel=' + nameOfPolicy, requestOptions);\n    props.refreshData();\n    setName(\"\");\n    setSecretPath(\"\");\n    setChecked([]);\n  }\n\n  function parsePath(path) {\n    if (path == undefined) return \"\";\n    var output = {};\n    var start = path.indexOf(\"\\\"\");\n    var end = path.indexOf(\"\\\"\", start + 1);\n    output[\"path\"] = path.substring(start + 1, end - 1);\n    var temp = [\"create\", \"update\", \"delete\", \"read\"];\n\n    for (var i = 0; i < temp.length; i++) {\n      var x = temp[i];\n      output[x] = path.indexOf(x) !== -1 ? \" \" + x : \"\";\n    }\n\n    return output;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: \"95vw\",\n      height: \"80vh\",\n      alignItems: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 50,\n        color: \"black\",\n        textAlign: \"left\",\n        fontWeight: 500\n      },\n      children: \"Update a Policy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"95vw\",\n        height: \"80vh\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: event => handleSubmit(event),\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: 100\n        },\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"policyInput\",\n          onChange: event => setName(event.target.value),\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            textAlign: \"left\",\n            marginRight: 30\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                overflow: \"hidden\",\n                whiteSpace: \"nowrap\",\n                color: \"black\",\n                marginRight: 15\n              },\n              children: \"Name of Policy:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            options: Object.keys(policytoPolicyI),\n            style: {\n              width: 300\n            },\n            onChange: (event, newValue) => {\n              setName(newValue);\n              var temp = [\"create\", \"update\", \"delete\", \"read\"];\n              var output = parsePath(policytoPolicyI[newValue].rules);\n\n              for (var i = 0; i < temp.length; i++) {\n                if (output[temp[i]] != \"\") {\n                  handleToggle(i);\n                }\n              }\n            },\n            inputValue: nameOfPolicy,\n            onInputChange: (event, newInputValue) => {\n              setName(newInputValue);\n\n              if (policytoPolicyI[newInputValue] == undefined) {\n                setChecked([]);\n                setSecretPath(\"\");\n              } else {\n                var temp = [\"create\", \"update\", \"delete\", \"read\"];\n                const output = parsePath(policytoPolicyI[newInputValue].rules);\n                setSecretPath(output[\"path\"]);\n\n                for (var i = 0; i < temp.length; i++) {\n                  if (output[temp[i]] != \"\") {\n                    handleToggle(i);\n                  }\n                }\n              }\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              label: \"Enter Name\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 42\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this), nameError !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\",\n              fontSize: 15\n            },\n            children: nameError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 39\n          }, this)]\n        }, \"policyInput\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"pathInput\",\n          onChange: event => setSecretPath(event.target.value),\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            textAlign: \"left\",\n            marginRight: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                overflow: \"hidden\",\n                whiteSpace: \"nowrap\",\n                color: \"black\",\n                marginRight: 15\n              },\n              children: \"Secret Path:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            disabled: policytoPolicyI[nameOfPolicy] == undefined,\n            type: \"text\",\n            placeholder: \"e.g. secret/foo/*\",\n            value: secretPath,\n            onChange: event => setSecretPath(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this), secretPathError !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\",\n              fontSize: 15\n            },\n            children: secretPathError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 45\n          }, this)]\n        }, \"pathInput\", true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              overflow: \"hidden\",\n              whiteSpace: \"nowrap\",\n              color: \"black\",\n              marginRight: 15\n            },\n            children: \"Secret Permissions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\"\n            },\n            children: [[0, 1].map(value => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 50,\n                  textAlign: \"center\"\n                },\n                children: [value === 0 && \"Create\", value === 1 && \"Read\", value === 2 && \"Update\", value === 3 && \"Delete\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                disabled: policytoPolicyI[nameOfPolicy] == undefined,\n                checked: checkedCategories.indexOf(value) !== -1,\n                onChange: () => handleToggle(value),\n                inputProps: {\n                  'aria-label': 'primary checkbox'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 21\n            }, this)), [2, 3].map(value => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"row\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  width: 50,\n                  textAlign: \"center\"\n                },\n                children: [value === 0 && \"Create\", value === 1 && \"Read\", value === 2 && \"Update\", value === 3 && \"Delete\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n                disabled: policytoPolicyI[nameOfPolicy] == undefined,\n                checked: checkedCategories.indexOf(value) !== -1,\n                onChange: () => {\n                  handleToggle(value);\n                },\n                inputProps: {\n                  'aria-label': 'primary checkbox'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), checkedError !== \"\" && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\",\n              fontSize: 15\n            },\n            children: checkedError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 42\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: policytoPolicyI[nameOfPolicy] == undefined,\n          variant: \"primary\",\n          type: \"submit\",\n          style: {\n            width: 100,\n            height: 40,\n            marginTop: 30\n          },\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n}\n\n_s(UpdateAPolicy, \"lgUXcOuYIC+1l/U+pQxLZEQY46Y=\");\n\n_c = UpdateAPolicy;\nexport default UpdateAPolicy;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateAPolicy\");","map":{"version":3,"sources":["C:/Users/miasknda2101/Documents/React-Flask-Hashicorp-App/my-app/src/UpdateAPolicy.js"],"names":["React","useEffect","Form","Button","Checkbox","Autocomplete","TextField","UpdateAPolicy","props","nameOfPolicy","setName","useState","secretPath","setSecretPath","nameError","setNameError","secretPathError","setSecretError","checkedError","setCheckedError","checkedCategories","setChecked","policytoPolicyI","setPolicyToPolicyI","policytoPolicyInfo","console","log","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","handleSubmit","event","preventDefault","length","mapToCapabilities","requestOptions","method","body","JSON","stringify","policy","map","e","i","headers","fetch","token","refreshData","parsePath","path","undefined","output","start","end","substring","temp","x","display","flexDirection","width","height","alignItems","fontSize","color","textAlign","fontWeight","target","marginRight","overflow","whiteSpace","Object","keys","newValue","rules","newInputValue","params","justifyContent","marginTop"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { TextField } from '@material-ui/core';\r\nfunction UpdateAPolicy(props) {\r\n  const [nameOfPolicy,setName] = React.useState(\"\")\r\n  const [secretPath,setSecretPath] = React.useState(\"\")\r\n  const [nameError,setNameError] = React.useState(\"\")\r\n  const [secretPathError,setSecretError] = React.useState(\"\")\r\n  const [checkedError,setCheckedError] = React.useState(\"\")\r\n  const [checkedCategories,setChecked] = React.useState([])\r\n  const [policytoPolicyI,setPolicyToPolicyI] = React.useState({})\r\n  useEffect(()=>{ setPolicyToPolicyI(props.policytoPolicyInfo);console.log(props.policytoPolicyInfo)},[props.policytoPolicyInfo])\r\n  const handleToggle = (value) => {\r\n    const currentIndex = checkedCategories.indexOf(value);\r\n    const newChecked = [...checkedCategories];\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n    setChecked(newChecked);\r\n  };\r\n\r\n    async function handleSubmit(event){\r\n        event.preventDefault()\r\n        if(nameOfPolicy === \"\"){setNameError(\"There's an issue with the name\");return;}else{setNameError(\"\")}\r\n        if(secretPath === \"\"){setSecretError(\"There's an issue with the policy\");return;}else{setSecretError(\"\")}\r\n        if(checkedCategories.length === 0){setCheckedError(\"You must select at least one permission\");return;}else{setCheckedError(\"\")}\r\n        const mapToCapabilities = {0:'\\\\\"create\\\\\"',1:'\\\\\"read\\\\\"',2:'\\\\\"update\\\\\"',3:'\\\\\"delete\\\\\"'}\r\n        const requestOptions = {\r\n            method:'POST',\r\n            body:JSON.stringify({\r\n                                policy:'#\\\\npath \\\\\"'+secretPath+'\\\\\" {\\\\n  capabilities = ['+ (mapToCapabilities[checkedCategories[0]]) + checkedCategories.map((e,i) => i > 0 ? (mapToCapabilities[e]) : \"\")+']\\\\n}'}),\t\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8'\r\n            }\r\n        }\r\n        await fetch('/policies?VAULT_TOKEN='+props.token+'&policyLabel='+nameOfPolicy, requestOptions)\r\n        props.refreshData();\r\n        setName(\"\")\r\n        setSecretPath(\"\")\r\n        setChecked([])\r\n    }\r\n\r\n    function parsePath(path){\r\n        if(path == undefined) return \"\"\r\n        var output = {}\r\n        var start = path.indexOf(\"\\\"\")\r\n        var end = path.indexOf(\"\\\"\",start + 1)\r\n        output[\"path\"] = path.substring(start + 1,end -1)\r\n        var temp = [\"create\",\"update\",\"delete\",\"read\"]\r\n        for(var i = 0; i < temp.length;i++){\r\n            var x = temp[i];\r\n            output[x] = (path.indexOf(x) !== -1 ? (\" \" + x): \"\")\r\n        }\r\n        return output\r\n      }\r\n\r\n  return (\r\n      <div style={{display:\"flex\",flexDirection:\"column\",width:\"95vw\",height:\"80vh\",alignItems:\"center\"}} >\r\n        <p style={{fontSize:50,color:\"black\",textAlign:\"left\",fontWeight:500}}>Update a Policy</p>\r\n        <div style={{display:\"flex\",flexDirection:\"column\",width:\"95vw\",height:\"80vh\",alignItems:\"center\"}}>\r\n        <Form onSubmit={(event) => handleSubmit(event)} style={{display:\"flex\",flexDirection:\"column\",height:100}}>\r\n            <Form.Group key={\"policyInput\"}controlId=\"policyInput\" onChange={(event) => setName(event.target.value)}style={{display:\"flex\",flexDirection:\"column\",textAlign:\"left\",marginRight:30}}>\r\n                <Form.Label>\r\n                <div style={{overflow:\"hidden\",whiteSpace:\"nowrap\",color:\"black\",marginRight:15}}>\r\n                Name of Policy: \r\n                </div>\r\n                </Form.Label>\r\n                <Autocomplete\r\n                options={Object.keys(policytoPolicyI)}\r\n                style={{ width: 300 }}\r\n                onChange={(event, newValue) => {\r\n                    setName(newValue);\r\n                        var temp = [\"create\",\"update\",\"delete\",\"read\"]\r\n                        var output = parsePath(policytoPolicyI[newValue].rules)\r\n                        for(var i = 0; i <temp.length;i++){\r\n                            if(output[temp[i]] != \"\"){handleToggle(i)}\r\n                        }\r\n                        \r\n                    \r\n                  }}\r\n                  inputValue={nameOfPolicy}\r\n                  onInputChange={(event, newInputValue) => {\r\n                    setName(newInputValue);\r\n                    if(policytoPolicyI[newInputValue] == undefined){\r\n                        setChecked([])\r\n                        setSecretPath(\"\")\r\n                    }else{\r\n                        var temp = [\"create\",\"update\",\"delete\",\"read\"]\r\n                        const output = parsePath(policytoPolicyI[newInputValue].rules)\r\n                        setSecretPath(output[\"path\"])\r\n                        for(var i = 0; i <temp.length;i++){\r\n                            if(output[temp[i]] != \"\"){handleToggle(i)}\r\n                        }\r\n                        \r\n                    }\r\n                  }}\r\n                renderInput={(params) => <TextField {...params} label=\"Enter Name\" variant=\"outlined\" />}\r\n                />\r\n                {nameError !== \"\" &&  <p style={{color:\"red\",fontSize:15}}>{nameError}</p>}\r\n            </Form.Group>\r\n            <Form.Group key={\"pathInput\"} controlId=\"pathInput\" onChange={(event) => setSecretPath(event.target.value)}style={{display:\"flex\",flexDirection:\"column\",textAlign:\"left\",marginRight:20}}>\r\n                <Form.Label>\r\n                <div style={{overflow:\"hidden\",whiteSpace:\"nowrap\",color:\"black\",marginRight:15}}>\r\n                Secret Path: \r\n                </div>\r\n                </Form.Label>\r\n                <Form.Control\r\n                    disabled={policytoPolicyI[nameOfPolicy] == undefined}\r\n                    type=\"text\"\r\n                    placeholder=\"e.g. secret/foo/*\"\r\n                    value={secretPath}\r\n                    onChange={(event) => setSecretPath(event.target.value)}\r\n                />\r\n                {secretPathError !== \"\" &&  <p style={{color:\"red\",fontSize:15}}>{secretPathError}</p>}\r\n            </Form.Group>\r\n            <div style={{display:\"flex\",flexDirection:\"column\"}}>\r\n                <div style={{overflow:\"hidden\",whiteSpace:\"nowrap\",color:\"black\",marginRight:15}}>\r\n                    Secret Permissions: \r\n                </div>\r\n                <div style={{display:\"flex\",flexDirection:\"row\",alignItems:\"center\"}}>\r\n                {[0,1].map((value) => \r\n                    <div style={{display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\",alignItems:\"center\"}}>\r\n                        <div style={{width:50,textAlign:\"center\"}}>{value === 0 && \"Create\"}{value === 1 && \"Read\"}{value === 2 && \"Update\"}{value === 3 && \"Delete\"}</div>\r\n                        <Checkbox\r\n                            disabled={policytoPolicyI[nameOfPolicy] == undefined}\r\n                            checked={checkedCategories.indexOf(value) !== -1}\r\n                            onChange={() => handleToggle(value)}\r\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                        />\r\n                    </div>)}\r\n                {[2,3].map((value) => \r\n                    <div style={{display:\"flex\",flexDirection:\"row\",justifyContent:\"space-between\",alignItems:\"center\"}}>\r\n                        <div style={{width:50,textAlign:\"center\"}}>{value === 0 && \"Create\"}{value === 1 && \"Read\"}{value === 2 && \"Update\"}{value === 3 && \"Delete\"}</div>\r\n                        <Checkbox\r\n                            disabled={policytoPolicyI[nameOfPolicy] == undefined}\r\n                            checked={checkedCategories.indexOf(value) !== -1}\r\n                            onChange={() => {handleToggle(value)}}\r\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                        />\r\n                    </div>)}\r\n                </div>\r\n                {checkedError !== \"\" &&  <p style={{color:\"red\",fontSize:15}}>{checkedError}</p>}\r\n\r\n            </div>\r\n            <Button  disabled={policytoPolicyI[nameOfPolicy] == undefined}\r\n                    variant=\"primary\" type=\"submit\" style={{width:100,height:40,marginTop:30}}>\r\n                Submit\r\n            </Button>\r\n        </Form>\r\n      </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default UpdateAPolicy;\r\n "]},"metadata":{},"sourceType":"module"}